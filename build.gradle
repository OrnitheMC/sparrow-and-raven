import java.util.regex.Pattern

import net.ornithemc.keratin.api.TaskSelection
import org.apache.commons.io.FileUtils

plugins {
	id 'java'
	id 'maven-publish'
	id 'keratin' version '11.2'
	id 'de.undercouch.download' version '5.6.0'
}

keratin {
	minecraftVersions '1.7.2'
	intermediaryGen = 2

	tasks TaskSelection.SPARROW_AND_RAVEN
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 8
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

def ENV = System.getenv()

makeSetupExceptions {
//	fromMinecraftVersion = <>
}

makeSetupSignatures {
//	fromMinecraftVersion = <>
}

def maven_url = ENV.MAVEN_URL
def maven_group = 'net.ornithemc'
def maven_group_for_url = 'net.ornithemc'.replace('.', '/')
def raven_artifact_id = 'raven'
def sparrow_artifact_id = 'sparrow'
def ravenVersions = new HashMap<String, Integer>()
def sparrowVersions = new HashMap<String, Integer>()

void fetchPublishedVersions(def maven_url, def maven_group_for_url, def artifact_id, def publishedVersions) {
	try {
		def xml = new URL("${maven_url}/${maven_group_for_url}/${artifact_id}/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		metadata.versioning.versions.version.each {
			String[] version = it.text().split(Pattern.quote('+build.'))
			String mcVersion = version[0]
			int build = Integer.parseInt(version[1])
			publishedVersions.compute(mcVersion, (key, value) -> value == null || build > value ? build : value)
		}
	} catch (FileNotFoundException ignored) {
		// only happens if no publications exist yet
	}
}

void makePublications(def dir, def ext, def versions, def maven_url, def maven_group, def maven_group_for_url, def artifact_id, def dir_in_jar) {
	def tmp = project.file('build/tmp/')

	dir.eachFile { file ->
		if (!file.name.endsWith(ext)) {
			return
		}

		def mcVersion = file.name.substring(0, file.name.length() - ext.length())
		def prevBuild = versions.getOrDefault(mcVersion, 0)

		if (prevBuild > 0) {
			def prevVersionBuild = "${mcVersion}+build.${prevBuild}"
			def prevJar = new File(tmp, "build-${prevBuild}.jar")
			def prevFile = new File(tmp, "build-${prevBuild}${ext}")

			download.run {
				src new URL("${maven_url}/${maven_group_for_url}/${artifact_id}/${prevVersionBuild}/${artifact_id}-${prevVersionBuild}.jar")
				dest prevJar
				overwrite true
			}
			copy {
				from({ zipTree(prevJar) }) {
					from "${dir_in_jar}/mappings${ext}"
					rename "mappings${ext}", "../${prevFile.name}"
				}

				into prevFile.parentFile
			}

			if (FileUtils.contentEquals(file, prevFile)) {
				return
			}
		}

		def nextBuild = prevBuild + 1
		def nextVersionBuild = "${mcVersion}+build.${nextBuild}"

		def makeJar = task("${mcVersion}_${dir_in_jar}_makeJar", type: Jar) {
			archiveFileName = "${artifact_id}-${nextVersionBuild}${ext}"
			from(project.file(file)) {
				into dir_in_jar
				rename file.name, "mappings${ext}"
			}
			destinationDirectory = project.file("build/jars")
		}
	
		build.dependsOn makeJar
	
		publishing {
			publications {
				create("${mcVersion.replace(" ", "")}_${dir_in_jar}_mavenJava", MavenPublication) {
					groupId maven_group
					artifactId artifact_id
					version nextVersionBuild
					artifact(makeJar)
				}
			}
		}
	}
}

if (maven_url) {
	fetchPublishedVersions(maven_url, maven_group_for_url, raven_artifact_id, ravenVersions)
	fetchPublishedVersions(maven_url, maven_group_for_url, sparrow_artifact_id, sparrowVersions)

	makePublications(keratin.files.getExceptionsDirectory(), '.excs', ravenVersions, maven_url, maven_group, maven_group_for_url, raven_artifact_id, 'exceptions')
	makePublications(keratin.files.getSignaturesDirectory(), '.sigs', sparrowVersions, maven_url, maven_group, maven_group_for_url, sparrow_artifact_id, 'signatures')

	publishing {
		repositories {
			if (maven_url) {
				maven {
					url maven_url
					credentials {
						username ENV.MAVEN_USERNAME
						password ENV.MAVEN_PASSWORD
					}
					authentication {
						basic(BasicAuthentication)
					}
				}
			}
		}
	}
}
